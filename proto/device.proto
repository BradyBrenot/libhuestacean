syntax = "proto3";

/* Describes a type of light provider known by the daemon */
message LightProviderArchetype {
    //Archetype's name, e.g. "Philips Hue bridge"
    string name = 1;

    //Whether the provider supports low latency light updates
    bool low_latency_supported = 2;
        
    //if > 0, how many low-latency lights can be present at once; if <= 0, no limit
    uint32 max_low_latency = 3;
}

/* A light contained within a device archetype, with its default location */
message DeviceArchetypeLight {
    LightLocation default_location = 1;
}

/* Describes a type of device known by the daemon */
message DeviceArchetype {
    //Whether the lights contained within can be moved (if not, only the whole device can be moved)
    bool are_lights_movable = 1;
    
    //This device's lights, with their default location.
    //the key, an int, is unique only _within_ this device; e.g. two Devices may have the same Light0
    map<uint32,DeviceArchetypeLight> lights = 2;
}

////////////////////////////////////////////////////////////////////////

/* LightProvider is a service the daemon is using to connect to lights, 
 * e.g. it may be a single Hue bridge, or it may be the Razer Chroma SDK 
 */
 message LightProvider {
    //What sort of light provider is this? This is the underlying tech / API being used.
    uint32 archetype_id = 1;

    //Name of the light provider. Disambiguates between providers of the same archetype.
    string name = 2;
}

/* Devices are a thing in the real-world that emit light, and that Huestacean can control. */
message Device {
    //What sort of light is this? This is the underlying tech / API being used.
    uint32 archetype_id = 1;

    //The device's friendly name, if it has one
    uint32 name = 2;
}

////////////////////////////////////////////////////////////////////////

/* The position of a light in the room is given as an axis-aligned box.
 * This position is given as relative to its device. */
 message LightLocation {
    float min_x = 1;
    float min_y = 2;
    float min_z = 3;

    float max_x = 4;
    float max_y = 5;
    float max_z = 6;
}
/* Devices do not emit light, their coordinates are given as a (3D) point 
 * and scaling factor that's applied uniformly to the contained lights
 */
 message DeviceLocation {
    float x = 1;
    float y = 2;
    float z = 3;

    float scale_x = 4;
    float scale_y = 5;
    float scale_z = 6;
}