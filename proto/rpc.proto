syntax = "proto3";

import "device.proto";
import "room.proto";
//import "scene.proto";

message GetLightProvidersRequest {
    //optional: if set, only return the given providers
    repeated uint32 light_provider_id = 1;
}

message GetLightProvidersResponse {
    map<uint32, LightProvider> providers = 1;
}

message GetDevicesRequest {
    //optional: if set, only return *this* device
    repeated uint32 device_id = 1;

    //optional: if set, only return devices for *this* provider
    repeated uint32 light_provider_id = 2;
}

message GetDevicesResponse {
    map<uint32, Device> devices = 1;
}

message GetRoomsRequest {
    //optional: if set, only return *this* room
    repeated uint32 room_id = 1;
}

message GetRoomsResponse {
    map<uint32, Room> rooms = 1;
}

message GetLightProviderArchetypesRequest {
    //optional: if set, only return *this* archetype
    repeated uint32 archetype_id = 1;
}

message GetLightProviderArchetypesResponse {
    map<uint32, LightProviderArchetype> provider_archetypes = 1;
}

message GetDeviceArchetypesRequest {
    //optional: if set, only return *this* archetype
    repeated uint32 archetype_id = 1;
}

message GetDeviceArchetypesResponse {
    map<uint32, DeviceArchetype> device_archetypes = 1;
}

service HuestaceanServer {
    rpc GetLightProviders(GetLightProvidersRequest) returns (GetLightProvidersResponse);
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse);
    rpc GetRooms(GetRoomsRequest) returns (GetRoomsResponse);

    rpc GetLightProviderArchetypes(GetLightProviderArchetypesRequest) returns (GetLightProviderArchetypesResponse);
    rpc GetDeviceArchetypes(GetDeviceArchetypesRequest) returns (GetDeviceArchetypesResponse);
}