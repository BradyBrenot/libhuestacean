syntax = "proto3";
package libhuestacean;

import "device.proto";
import "room.proto";
//import "scene.proto";

//////////////////////////////////////////////////////////////////////////
// Getters

message GetDeviceProvidersRequest {
    //optional: if set, only return the given providers
    repeated string device_provider_id = 1;
}

message GetDeviceProvidersResponse {
    map<string, DeviceProvider> providers = 1;
}

message GetDevicesRequest {
    //optional: if set, only return *this* device
    repeated string device_id = 1;

    //optional: if set, only return devices for *this* provider
    repeated string provider_id = 2;
}

message GetDevicesResponse {
    map<string, Device> devices = 1;
}

message GetRoomsRequest {
    //optional: if set, only return *this* room
    repeated uint32 room_id = 1;
}

message GetRoomsResponse {
    map<uint32, Room> rooms = 1;
}

message GetDeviceProviderArchetypesRequest {
    //optional: if set, only return *this* archetype
    repeated uint32 archetype_id = 1;
}

message GetDeviceProviderArchetypesResponse {
    map<uint32, DeviceProviderArchetype> provider_archetypes = 1;
}

message GetDeviceArchetypesRequest {
    //optional: if set, only return *this* archetype
    repeated uint32 archetype_id = 1;
}

message GetDeviceArchetypesResponse {
    map<uint32, DeviceArchetype> device_archetypes = 1;
}

//////////////////////////////////////////////////////////////////////////
// Commands

message LinkRequest {
    string device_id = 1;
}
message LinkResponse {
}

//////////////////////////////////////////////////////////////////////////
// RPCs

service HuestaceanServer {

	//////////////////////////////////////////////////////////////////////////
	// Getters

    rpc GetDeviceProviders(GetDeviceProvidersRequest) returns (GetDeviceProvidersResponse);
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse);
    rpc GetRooms(GetRoomsRequest) returns (GetRoomsResponse);

    rpc GetDeviceProviderArchetypes(GetDeviceProviderArchetypesRequest) returns (GetDeviceProviderArchetypesResponse);
    rpc GetDeviceArchetypes(GetDeviceArchetypesRequest) returns (GetDeviceArchetypesResponse);

	//////////////////////////////////////////////////////////////////////////
	// Commands

	rpc Link(LinkRequest) returns (LinkResponse);

	/*
	rpc CreateRoom
	rpc AddDevicesToRoom
	rpc RemoveDevicesFromRoom

	rpc PostScene

	//Manually applies a given scene to a given room. Replaces the existing scene that is currently on the room;
	//at the moment you cannot have multiple scenes on the same room at once.
	rpc ApplySceneToRoom

	//Add or modify an effect on a scene
	//All "Post effect" RPCs have params: SceneId, EffectId (if omitted, this creates a new effect), Properties (different depending on the Effect)
	rpc PostScreenSyncEffect(Scene, EffectId, Properties)
	rpc PostAudioSyncEffect(Scene, EffectId, Properties)

	//Fire one-off effects. These overlap any existing scenes on the given room.
	rpc FireRippleEffect
	rpc FirePulseEffect
	*/
}

/*
	SCREENSYNC = 0;
	AUDIOSYNC = 1;
	SOLID = 2;
	PULSE = 3;
	POINT = 4;
	CONE = 5;
	RECTANGLE = 6;
	RIPPLE = 7;
	FLICKER = 8;
	*/